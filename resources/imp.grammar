start = trim @(namespace, newlines, 0, 0) final_trim

none = /&*/
ws = /\s+/
trim = /\s*/
final_trim = /\s*$/
newlines = /(\s*\n)+\s*/
comma = trim "," trim
spaces = /[ \t]+/
dot = "."
path_separator = "."
id = /[a-zA-Z0-9_]+/
comma_or_newline = /\s*((\s*\n)+|,)\s*/
semicolon_or_newline = /\s*((\s*\n)+|;)\s*/

string = ('"' /[^"]*/ '"') | ("'" /[^']*/ "'")
bool = "true" | "false"
int = /-?[0-9]+/
float = /-?([0-9]*\.)?[0-9]+f?/
operator = '+' | '-' | '/' | '*' | '<=' | '>=' | '<' | '>'
constraint_operator = '=' | '<=' | '>=' | '<' | '>' | '+=' | '-=' | '*=' | '/='
value = string | bool | int | float
operation_separator = trim operator trim

parameters = "(" trim @(expression, comma_or_newline, 0, 0) trim ")"

optional_parameters = trim parameters

reference_token = id @(parameters, none, 0, 1)

reference = @(id, path_separator, 1, 0) @(optional_parameters, none, 0, 1)

declare_symbol = id trim @(type_info, none, 0, 1)

type_info = ":" trim id 

function_statement =
	declare_variable
	| if
	| return
	| expression

expression_part =
	value
	| reference	

expression = @(expression_part, operation_separator, 1, 0)

namespace = "namespace" ws id trim "{" trim @(class, newlines, 0, 0) trim "}"
	
function_definition = @(function_attribute, none, 0, 1) id trim "(" @(declare_symbol, comma, 0, 0) ")" trim @(type_info, none, 0, 1) trim long_block

function_attribute =  "abstract" ws

class = "class" ws id trim "{" trim @(function_definition, newlines, 0, 0) trim "}"

long_block = "{" trim @(function_statement, semicolon_or_newline, 0, 0) trim "}"

if = "if" trim "(" trim expression trim ")" trim long_block

optional_expression = spaces expression

return = "return" @(optional_expression, none, 0, 1)

optional_assignment = trim "=" trim expression

declare_variable = "var" ws id trim type_info @(optional_assignment, none, 0, 1)